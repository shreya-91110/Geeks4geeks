class Solution {
  public:
    // Function to count inversions in the array.
    
    int merge(vector<int>&arr,int low,int mid,int high){
        
        vector<int>temp;
        int st=low;
        int cnt=0;
        int right=mid+1;
        while(st<=mid&&right<=high){
            
            if(arr[st]<=arr[right]){
                
                temp.push_back(arr[st]);
                st++;
            }
            else {
                temp.push_back(arr[right]);
                cnt+=(mid-st+1);
                right++;
            }
            
        }
        while(st<=mid){
            temp.push_back(arr[st]);
            st++;
        }
          while(right<=high){
            temp.push_back(arr[right]);
            right++;
        }
        for(int i=low;i<=high;i++){
            arr[i]=temp[i-low];
        }
        
        
        return cnt;
        
    }
    
    
    
    
    
    int mergesort(vector<int>&arr,int low,int high){
        int cnt=0;
        if(low>=high)return cnt;
        
        int mid=(low+high)/2;
      cnt+=mergesort(arr,low,mid);
      cnt+=mergesort(arr,mid+1,high);
       cnt+= merge(arr,low,mid,high);
        
        return cnt;
    }
    
    int inversionCount(vector<int> &arr) {
        // Your Code Here
        
        return mergesort(arr,0,arr.size()-1);
        
        
    }
};
