class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        // code here
         vector<int>g[N];
         for(auto x: edges)
         {
             g[x[0]].push_back(x[1]);
             g[x[1]].push_back(x[0]);
         }
         
         vector<int>dist(N, 1e9);
         dist[src] = 0;
         queue<pair<int,int>>q;
         q.push({src, 0});
         
         vector<int>ans(N, -1);
         while(!q.empty())
         {
             int node = q.front().first;
             int w = q.front().second;
             q.pop();
             for(auto next_node: g[node])
             {
                  if(dist[next_node] > w+1)
                  {
                      dist[next_node] = w+1;
                      q.push({next_node, dist[next_node]});
                  }
             }
         }
           for(int i=0;i<N;i++)
           {
               if(dist[i]!= 1e9)
               {
                   ans[i] = dist[i];
               }
           }
         return ans;
    }
};
