
class Solution {
public:
    // Function to check if a queen can be placed at board[row][col]
    bool canPut(int row, int col, vector<int>& temp) {
        int r = row, c = col;
        
        // Check upper diagonal on left side
        while (r >= 0 && c >= 0) {
            if (temp[r] == c + 1) return false;
            r--;
            c--;
        }

        // Check this column on the upper side
        r = row;
        c = col;
        while (r >= 0) {
            if (temp[r] == c + 1) return false;
            r--;
        }

        // Check upper diagonal on right side
        r = row;
        c = col;
        while (r >= 0 && c < temp.size()) {
            if (temp[r] == c + 1) return false;
            r--;
            c++;
        }

        return true;
    }

    // Recursive helper function to solve the problem
    void help(int n, vector<vector<int>>& ans, vector<int>& temp, int row) {
        if (row == n) {
            ans.push_back(temp);
            return;
        }

        for (int col = 0; col < n; col++) {
            if (canPut(row, col, temp)) {
                temp[row] = col + 1;
                help(n, ans, temp, row + 1);
                temp[row] = 0;
            }
        }
    }

    // Main function to solve the N-Queen problem
    vector<vector<int>> nQueen(int n) {
        vector<vector<int>> ans;
        vector<int> temp(n, 0);
        help(n, ans, temp, 0);
        return ans;
    }
};
